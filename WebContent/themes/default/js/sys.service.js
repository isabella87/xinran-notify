// Generated by CoffeeScript 1.8.0
(function() {
  var BaseService, FUNCTION_RX, Service, __DummyService, __ServiceRef, __createService, __removeService, __root, __sysRef, __sysServiceRef,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  __root = this;

  if (!__root.Sys) {
    __root.Sys = {};
  }

  __sysRef = __root.Sys;

  if (!__sysRef.service) {
    __sysRef.service = {};
  }

  __sysServiceRef = __sysRef.service;

  if (!__sysServiceRef.ctors) {
    __sysServiceRef.ctors = {};
  }

  if (!(__sysServiceRef.services instanceof Array)) {
    __sysServiceRef.services = [];
  }

  Service = (function() {
    function Service() {
      this.load = __bind(this.load, this);
    }

    Service.prototype.load = function(func) {
      throw new 'This is an abstract service!';
    };

    return Service;

  })();

  BaseService = (function(_super) {
    __extends(BaseService, _super);

    function BaseService(url, params, verb) {
      this.url = url;
      this.params = params != null ? params : {};
      this.verb = verb != null ? verb : 'GET';
      this.load = __bind(this.load, this);
      if (!verb && typeof params === 'string') {
        this.verb = params;
        this.params = {};
      }
      this.config = {
        baseSrvUrl: ''
      };
    }

    BaseService.prototype.load = function(func) {
      var base, error, success, _ref;
      __root.assert(this.url, 'Invalid url: "' + this.url + '" of ' + this.constructor.toString());
      base = ((_ref = this.config) != null ? _ref.baseSrvUrl : void 0) ? this.config.baseSrvUrl : '';
      success = function(data) {
        return func(data, 0, '');
      };
      error = function(ecode, emsg) {
        return func(null, ecode, emsg);
      };
      if (this.verb === 'GET') {
        return __sysRef.get(base + this.url, this.params, success, error);
      } else if (this.verb === 'POST') {
        return __sysRef.post(base + this.url, this.params, success, error);
      } else if (this.verb === 'PUT') {
        return __sysRef.put(base + this.url, this.params, success, error);
      } else if (this.verb === 'DELETE') {
        return __sysRef["delete"](base + this.url, this.params, success, error);
      } else {
        return __root.assert(false, 'Unknown verb: ' + this.verb);
      }
    };

    return BaseService;

  })(Service);

  __DummyService = (function(_super) {
    __extends(__DummyService, _super);

    function __DummyService() {
      this.load = __bind(this.load, this);
      __DummyService.__super__.constructor.call(this);
    }

    __DummyService.prototype.load = function(func) {
      return func({}, 0, '');
    };

    return __DummyService;

  })(Service);

  __ServiceRef = (function() {
    function __ServiceRef(attributes) {
      this.attributes = attributes;
      this.callback = __bind(this.callback, this);
      this.reset = __bind(this.reset, this);
      this.load = __bind(this.load, this);
      this.prepare = __bind(this.prepare, this);
      this.name = this.attributes.name;
      this.alwaysLoad = this.attributes.alwaysLoad;
      this.callbacks = [];
      this.reset();
    }

    __ServiceRef.prototype.prepare = function() {
      var acArgs, cArgs, ca, ctor, fr, us, _i, _len;
      ctor = __sysServiceRef.ctors[this.name];
      __root.assert(ctor, 'Cannot find service: ' + this.name);
      __root.assert(typeof ctor === 'function', '"ctor" should be a function but ' + ctor);
      fr = FUNCTION_RX.exec(ctor.toString());
      cArgs = fr ? fr[1].split(/\s*\,\s*/) : [];
      acArgs = [];
      for (_i = 0, _len = cArgs.length; _i < _len; _i++) {
        ca = cArgs[_i];
        acArgs.push(__root.hasOwnProperty(ca) ? __root[ca] : null);
      }
      us = Object.create(ctor.prototype);
      ctor.apply(us, acArgs);
      if (us instanceof BaseService) {
        us.config = __sysRef.config;
      }
      return us;
    };

    __ServiceRef.prototype.load = function(ctx) {
      var cb, cbs;
      if (ctx == null) {
        ctx = {};
      }
      if (!this.loaded && !this.loading) {
        this.loading = true;
        cbs = (function() {
          var _i, _len, _ref, _results;
          _ref = this.callbacks;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            cb = _ref[_i];
            if (typeof cb === 'function') {
              _results.push(cb);
            }
          }
          return _results;
        }).call(this);
        this.prepare().load((function(_this) {
          return function(data, ecode, emsg) {
            var c, errorHandled, _i, _len;
            _this.loading = false;
            _this.loaded = true;
            c = 0;
            errorHandled = false;
            for (_i = 0, _len = cbs.length; _i < _len; _i++) {
              cb = cbs[_i];
              if (cb(data, ecode, emsg, ctx) && ecode) {
                errorHandled = true;
              }
            }
            if (ecode && !errorHandled) {
              __sysRef.errorDlg(emsg ? emsg : '\u64cd\u4f5c\u5931\u8d25');
              return true;
            } else {
              return false;
            }
          };
        })(this));
      }
      return this;
    };

    __ServiceRef.prototype.reset = function() {
      this.loading = false;
      this.loaded = false;
      return this;
    };

    __ServiceRef.prototype.callback = function(func) {
      __root.assert(func instanceof Function, '"func" should be function, but ' + func);
      this.callbacks.push(func);
      return this;
    };

    return __ServiceRef;

  })();

  __sysServiceRef.Service = Service;

  __sysServiceRef.BaseService = BaseService;


  /*
  Match:
  - ^          the beginning of the string
  - function   the word 'function'
  - \s*        optionally followed by white space
  - \(         followed by an opening brace
  - ([\w\$\s\,]+)  capture one or more valid JavaScript identifier characters
  - \s*        optionally followed by white space (in theory there won't be any here,
                so if performance is an issue this can be omitted[1]
  - \)         followed by an closing brace
   */

  FUNCTION_RX = /^function\s*\(([\w\s\,]+)\s*\)/;


  /*
  Create a new service if not exists
  @param serviceName
  @param alwaysLoad
  @return
   */

  __createService = function(serviceName, alwaysLoad) {
    var newServiceRef, service, _i, _len, _ref;
    __root.assert(typeof serviceName === 'string' && serviceName);
    serviceName = serviceName.trim();
    _ref = __sysServiceRef.services;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      service = _ref[_i];
      if (service.name === serviceName) {
        return service;
      }
    }
    newServiceRef = new __ServiceRef({
      name: serviceName,
      alwaysLoad: alwaysLoad
    });
    __sysServiceRef.services.push(newServiceRef);
    return newServiceRef;
  };


  /*
  Remove a service if exists
  @param serviceName
  @return
   */

  __removeService = function(serviceName) {
    var removedService, service, tmp;
    __root.assert(typeof serviceName === 'string' && serviceName);
    removedService = null;
    tmp = [];
    while (__sysServiceRef.services) {
      service = __sysServiceRef.shift();
      if (service != null ? service.name : void 0) {
        if (service.name === serviceName) {
          removedService = service;
        } else {
          tmp.push(service);
        }
      }
    }
    __sysServiceRef.services = tmp;
    return removedService;
  };


  /*
  Register constructor
   */

  __sysServiceRef.register = function(serviceName, ctor) {
    __root.assert(typeof serviceName === 'string' && serviceName);
    __root.assert(typeof ctor === 'function', '"ctor" should be a function!');
    return __sysServiceRef.ctors[serviceName] = ctor;
  };


  /*
  Copy properties
  @param src
  @param dst
   */

  __sysServiceRef.copyProps = function(src, dst) {
    var key, value;
    if (typeof src === 'number') {
      dst.value = src;
    } else if (typeof src === 'string') {
      dst.value = src;
    } else if (typeof src === 'boolean') {
      dst.value = src;
    } else if (src instanceof Date) {
      dst.value = src;
    } else if (src instanceof Array) {
      dst.value = src;
    } else {
      for (key in src) {
        value = src[key];
        dst[key] = value;
      }
    }
    return dst;
  };


  /*
  Bind function "func" to event "on" of service
  @param serviceName name of service
  @param func Callback function when event "on" triggered
  @param alwaysLoad this service should be loaded always
   */

  __sysServiceRef.on = function(serviceName, func, alwaysLoad) {
    if (alwaysLoad == null) {
      alwaysLoad = true;
    }
    __root.assert(typeof serviceName === 'string' && serviceName);
    __root.assert(typeof func === 'function', '"func" should be a function!');
    return __createService(serviceName, alwaysLoad).callback(func);
  };


  /*
  load service
  @param serviceName name of service
  @param ctx context
  @param force force to reload
  @return service
   */

  __sysServiceRef.load = function(serviceName, ctx, force) {
    var service;
    if (ctx == null) {
      ctx = {};
    }
    if (force == null) {
      force = false;
    }
    __root.assert(typeof serviceName === 'string' && serviceName);
    service = __createService(serviceName, false);
    if (force) {
      service.reset();
    }
    return service.load(ctx);
  };


  /*
  Reset a service if exists
  @param serviceName
  @return service
   */

  __sysServiceRef.reset = function(serviceName) {
    var service;
    __root.assert(typeof serviceName === 'string' && serviceName);
    service = __createService(serviceName, false);
    return service.reset();
  };


  /*
  Load all services
  @param ctx context
   */

  __sysServiceRef.loadAll = function(ctx) {
    var service, _i, _len, _ref, _results;
    if (ctx == null) {
      ctx = {};
    }
    _ref = __sysServiceRef.services;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      service = _ref[_i];
      if (service && service.alwaysLoad && !(service != null ? service.loaded : void 0)) {
        _results.push(service.load(ctx));
      }
    }
    return _results;
  };


  /*
  Dump all services
   */

  __sysServiceRef.dumpAll = function() {
    var i, service, _i, _len, _ref;
    __root.assert(__sysServiceRef.services instanceof Array, 'Sys.service.services is not an Array!');
    __root.log('***************************************************************************');
    i = 0;
    _ref = __sysServiceRef.services;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      service = _ref[_i];
      if (service) {
        __root.log('[' + (i++) + ']  ' + service.name + ' ( alwaysLoad=' + service.alwaysLoad + ', loaded=' + service.loaded + ' )');
      }
    }
    __root.log('');
    __root.log('' + i + ' service(s) in total.');
    return __root.log('***************************************************************************');
  };


  /*
  Auto load all when document is ready
   */

  jQuery(document).ready(function() {
    return __sysServiceRef.loadAll();
  });

}).call(this);
